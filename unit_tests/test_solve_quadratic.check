#suite test_solve_quadratic

/*  ----- DISCRIMINANT > 0 -----  */

#test test_solve_quadratic1
double a = 5;
double b = 7;
double c = -3;
double x1 = 0.344030650891055;
double x2 = -1.744030650891055;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic2
double a = 1;
double b = -3;
double c = 2;
double x1 = 1;
double x2 = 2;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic3
double a = 1;
double b = 0;
double c = -9;
double x1 = 3;
double x2 = -3;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic4
double a = 1;
double b = 0;
double c = -1;
double x1 = 1;
double x2 = -1;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic5
double a = 2;
double b = 6;
double c = 4;
double x1 = -1;
double x2 = -2;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic6
double a = 1;
double b = 1.0e+30;
double c = -1;
double x1 = -1.0e+30;
double x2 = 1.0e-30;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic7
double a = 1;
double b = -1.0e+30;
double c = 1;
double x1 = 1.0e+30;
double x2 = 1.0e-30;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic8
double a = 21;
double b = 2121;
double c = -21212121;
double x1 = 955.8057437975797;
double x2 = -1056.8057437975797;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic9
double a = -21;
double b = 2121;
double c = 21212121;
double x1 = -955.8057437975797;
double x2 = 1056.8057437975797;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic10
double a = 21;
double b = -2121;
double c = -21212121;
double x1 = -955.8057437975797;
double x2 = 1056.8057437975797;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic11
double a = -21;
double b = -2121;
double c = 21212121;
double x1 = 955.8057437975797;
double x2 = -1056.8057437975797;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(2, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

/*  ----- DISCRIMINANT = 0 -----  */

#test test_solve_quadratic12
double a = 1;
double b = 4;
double c = 4;
double x1 = -2;
double x2 = -2;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(1, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic13
double a = 1;
double b = 2;
double c = 1;
double x1 = -1;
double x2 = -1;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(1, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic14
double a = 1;
double b = -4;
double c = 4;
double x1 = 2;
double x2 = 2;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(1, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic15
double a = 1;
double b = 0;
double c = 0;
double x1 = 0;
double x2 = 0;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, compare_roots(x1, x2, &roots));
ck_assert_int_eq(1, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

/*  ----- DISCRIMINANT < 0 -----  */

#test test_solve_quadratic16
double a = 1;
double b = 0;
double c = 1;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, isnan(roots.root[0]) && isnan(roots.root[1]));
ck_assert_int_eq(0, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic17
double a = 1;
double b = -1.0e-18;
double c = 1;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, isnan(roots.root[0]) && isnan(roots.root[1]));
ck_assert_int_eq(0, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic18
double a = 2;
double b = -2;
double c = 8;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, isnan(roots.root[0]) && isnan(roots.root[1]));
ck_assert_int_eq(0, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic19
double a = 21;
double b = 2121;
double c = 21212121;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, isnan(roots.root[0]) && isnan(roots.root[1]));
ck_assert_int_eq(0, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic20
double a = 21;
double b = -2121;
double c = 21212121;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, isnan(roots.root[0]) && isnan(roots.root[1]));
ck_assert_int_eq(0, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic21
double a = -21;
double b = 2121;
double c = -21212121;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, isnan(roots.root[0]) && isnan(roots.root[1]));
ck_assert_int_eq(0, roots.num_roots);
ck_assert_int_eq(OK, roots.err);

#test test_solve_quadratic22
double a = -21;
double b = -2121;
double c = -21212121;
quadratic_roots roots;
roots = solve_equation(a, b, c);
ck_assert_int_eq(1, isnan(roots.root[0]) && isnan(roots.root[1]));
ck_assert_int_eq(0, roots.num_roots);
ck_assert_int_eq(OK, roots.err);
